NAME
    Storage::Box - a module for managing storage at Box.com

SYNOPSIS
        use Storage::Box;

        my $box = Storage::Box->new(
            key_id => 'lasjfk',
            enterprise_id => '1231923',
            private_key => '/etc/box/keys/private_key.pem'
            password => 'password',
            client_id => '2lkjlkadsjfoiuawer',
            client_secret => 'alksdjfoaiusrnre'
        );

        $box->create_user('bob');

DESCRIPTION
    Storage::Box is module for interfacing with Box.com's REST API. It
    provides a JWT authenticated cleint for a server side application.

INSTALLATION
    Note that Storage::Box has several required dependencies, so check the
    installer output if you have problems installing. WWW::Curl requires the
    "libcurl" libraries to install correctly. If this dependent module
    installation is failing, install the appropriate "libcurl" packages on
    your system.

    Steps to install manually:

        perl Makefile.PL
        make
        make test
        make install

METHODS
    authenticate_enterprise($self)

        Attempts to authenticate an enterprise access token,
        and requires the following parameters be set:

            * key_id
            * enterprise_id
            * private_key
            * password
            * client_id
            * client_secret

        If successful the 'enterprise_auth' parameter will be
        set to a Storage::Box::Auth object with a suitable
        token.  These tokens are generally good for 1 hour, and
        will attempt to reprovision automatically when expired.

    authenticate_user($self)

        Attempts to authenticate a user access token.
        Requires the following parameters be populated:

            * key_id
            * user_id
            * private_key
            * password
            * client_id
            * client_secret

        A user_id can be obtained by using the enterprise_auth
        to create a new app user via create_user.  This
        user_id can then be used to inteface with files and
        folders.  The user auth token usually lasts for
        about 1 hour, and will try to auto reprovision when
        expired.

    create_user($self,$name)

        Creates a new Box.com App user with the given username.
        If successful it will set the user object's id to the
        user's user_id.

    read_user($self,$user_id)

        Reads a user object for the given user_id,
        returns a hash with the user's data.
        On failure it will return an empty hash.

    update_user($self,$user_id,%options)

        Updates a user object specified by user_id with the given hash 
        of key => values. Returns the updated user hash.

    delete_user($self,$user_id)

        Deletes the user associated with $user_id.  Returns true on success.

    create_file($self,$filename)

        Uploads the file specified by filename,
        and returns the file object.  If the 
        file is successfully uploaded the id 
        of the file object willl be set.

    download_file($self,$file_id)

        Returns the contents of the file specified by file_id,
        or an empty string if it fails.

    delete_file($self,$file_id)

        Deletes the file corresponding to the given file_id.
        Returns true if successful, false otherwise.

    create_folder($self,$name)

        Creates a folder with the given name and returns
        the folder id.  The parent of this folder is '0'
        by default.  Setting the 'parent' property on the
        folder object allows you to specify a different
        parent object.  This function returns the folder_id
        for the newly created folder.

    list_folder($self,$folder_id)

        Returns an array of hashes representing the files and folders
        contained by the folder with the given folder_id.

    delete_folder($self,$folder_id)

        Deletes the folder corresponding to the given folder_id.
        Returns true if successful, and false otherwise.

AUTHOR
    Dave Goehrig <dave@dloh.org>

COPYRIGHT
    Copyright (C) 2016 Best Practical Solutions, LLC.

LICENSE
    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

SEE ALSO
