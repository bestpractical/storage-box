# vim: ai ts=4 sts=4 et sw=4 ft=perl

package Storage::Box::Auth;

=pod

=head1 NAME

Storage::Box::Auth -- provides OAuth2 + JWT authentication and key management

=head1 SYNOPSIS

  Storage::Box::Auth::generate_keys("my-super-secret-password");
  ...
  Storate::Box::Auth::enterprise("keyid","enterpriseid")
    or
  Storate::Box::Auth::user("keyid","userid")

=head1 DESCRIPTION

This package manages the OAuth2 + JWT authentication scheme for applications used
by box.com.  It provides utility methods for generating a rsa aes256 2048bit 
public / private key pair.  It also provides authentication for both user and
enterprise account types.

=cut

use Modern::Perl;
use Crypt::JWT;
use Expect;
use Data::UUID;
use HTTP::Request;
use LWP::UserAgent;
use Crypt::PK::RSA;
use JSON qw/ decode_json /;

=pod

=head1 METHODS

B<generate_private_key($password)>

  Using openssl, this generates a 2048 bit aes256 private key file

=cut 

sub generate_private_key {
my ($password) = @_;
    my $exp = Expect->spawn("openssl genrsa -aes256 -out private_key.pem 2048") 
        or die "Failed to generate private_key.pem";
    $exp->raw_pty(1);
    $exp->expect(1,
        [ qr/private_key\.pem:/ => sub { 
            $exp->send("$password\r"); exp_continue;
        } ]
    );
    $exp->soft_close();
}

=pod

B<generate_public_key($password)>

  Using openssl, outputs the public key associated with the private_key.pem.
  The password must be the password associated with the private key.

=cut

sub generate_public_key {
    my ($password) = @_;
    my $exp = Expect->spawn("openssl rsa -pubout -in private_key.pem -out public_key.pem")
        or die "Failed to generate public_key.pem";
    $exp->raw_pty(1);
    $exp->expect(1,
        [ qr/private_key\.pem:/ => sub { 
            $exp->send("$password\r"); exp_continue;
        } ]
    );
    $exp->soft_close();
}

=pod

B<generate_keys($password)>

  Using openssl, this generate a public / private keypair with the given password.
  This function also outputs basic instructions for installing the public key at box.com

=cut

sub generate_keys {
    my ($password) = @_;
    generate_private_key $password;
    generate_public_key $password;
    print <<THERE;

To install this key in box.com:

1) Go to Edit Application and select your Box Platform application.

2) Scroll down to the Public Key Management section.

3) Select Add Public Key as shown below.

THERE

    do {
        local $/ = undef; 
        open my $fh, "< public_key.pem";
        print <$fh>;
    }
}

=pod

B<private_key($keyfile)>

    Loads a private keyfile
=cut

sub private_key {
    my ($keyfile,$password) = @_;
        print "opening $keyfile with $password\n";
    Crypt::PK::RSA->new($keyfile,$password);
}

=pod

B<enterprise($kid,$keyfile,$password,$clientid,$entperpriseid)>

    Creates a JWT assertion for an enterprise account.

    * $password = password for the keyfile
    * $kid = key id generated by Box.com
    * $keyfile = path to the private keyfile
    * $clientid = client id of the application creating the assertion
    * $enterpriseid = token specific to an enterprise when creating and managing app users

=cut

sub enterprise {
    my ($kid,$keyfile,$password,$clientid,$enterpriseid) = @_;
    my $ug = Data::UUID->new;
    my $jti = $ug->to_b64string($ug->create);
    my $time = time;
    my %claims = (
        iss => $clientid,
        sub => $enterpriseid,
        box_sub_type => "enterprise",
        aud => "https://api.box.com/oauth2/token",
        exp => $time + 60,
        iat => $time,
        jti => $jti
    );
    Crypt::JWT::encode_jwt( 
        alg => "RS256",
        payload => \%claims,
        key => $keyfile,
        keypass => $password,
        extra_headers =>  { kid => $kid },
    );
}

=pod

B<user($password,$kid,$keyfile,$clientid,$userid)>

    Creates a JWT assertion for a user account.

    * $password = password for the keyfile
    * $kid = key id generated by Box.com
    * $keyfile = path to the private keyfile
    * $clientid = client id of the application creating the assertion
    * $userid = app user_id for a token specific to an individual app user.

=cut

sub user {
    my ($kid,$keyfile,$password,$clientid,$userid) = @_;
    my $ug = Data::UUID->new;
    my $jti = $ug->to_b64string($ug->create);
    my $time = time;
    my %claims = (
        iss => $clientid,
        sub => $userid,
        box_sub_type => "user",
        aud => "https://api.box.com/oauth2/token",
        exp => $time + 60,
        iat => $time,
        jti => $jti
    );
    Crypt::JWT::encode_jwt( 
        alg => "RS256",
        payload => \%claims,
        key => $keyfile,
        keypass => $password,
        extra_headers =>  { kid => $kid },
    );
}

=pod

B<request($client_id,$client_secret,$jwt)>

    Requests an OAuth2 token for the given client, secret, and jwt

=cut

sub request {
    my ($client_id,$secret,$jwt) = @_;
    my $req = HTTP::Request->new(POST => "https://api.box.com/oauth2/token");
    $req->header("Content-Type" => "application/x-www-form-urlencoded");
    $req->content(
        "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&" .
        "assertion=$jwt&" .
        "client_id=$client_id&" .
        "client_secret=$secret"
    );
    my $ua = LWP::UserAgent->new;
    my $response = $ua->request($req);
    decode_json $response->content;
}



=pod

=head1 TO DO

stuff

=head1 BUGS

lots

=head1 COPYRIGHT

Best Practical LLC.

=head1 AUTHORS

Dave Goehrig <dave@dloh.org>

=cut

1;
